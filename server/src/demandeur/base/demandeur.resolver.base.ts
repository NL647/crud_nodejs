/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteDemandeurArgs } from "./DeleteDemandeurArgs";
import { DemandeurFindManyArgs } from "./DemandeurFindManyArgs";
import { DemandeurFindUniqueArgs } from "./DemandeurFindUniqueArgs";
import { Demandeur } from "./Demandeur";
import { DemandeurService } from "../demandeur.service";

@graphql.Resolver(() => Demandeur)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DemandeurResolverBase {
  constructor(
    protected readonly service: DemandeurService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Demandeur",
    action: "read",
    possession: "any",
  })
  async _demandeursMeta(
    @graphql.Args() args: DemandeurFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Demandeur])
  @nestAccessControl.UseRoles({
    resource: "Demandeur",
    action: "read",
    possession: "any",
  })
  async demandeurs(
    @graphql.Args() args: DemandeurFindManyArgs
  ): Promise<Demandeur[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Demandeur, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Demandeur",
    action: "read",
    possession: "own",
  })
  async demandeur(
    @graphql.Args() args: DemandeurFindUniqueArgs
  ): Promise<Demandeur | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Demandeur)
  @nestAccessControl.UseRoles({
    resource: "Demandeur",
    action: "delete",
    possession: "any",
  })
  async deleteDemandeur(
    @graphql.Args() args: DeleteDemandeurArgs
  ): Promise<Demandeur | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
